// Worksheet 2
// CS 162
// Philip Warton

Describe the following runtimes in big-Oh notation.

3n^3 + 2n + 7
O(n^3)

(5 * n) * (3 + log(n))
O(nlog(n))

1 + 2 + 3 + ... + n
O(n^2)

n + log(n^2)
O(n)

((n+1)log(n))/2
O(nlog(n))

n^3 + n! + 3
O(n!)

2^n + n^2
O(2^n)

n(sqrt(n) + logn)
O(nsqrt(n))

Describe the following code samples' time complexity with big-Oh notation.


for (int i = n; i > 0; i = i/2) {
	...
}
for (int j = 0; j * j < n; j++) ...

O(log(n)) + O(sqrt(n)) = O(sqrt(n))


for (int i = 0; i < n; i++) {
	for (int j = n; j > 0; j = j/2) {
	...
	}
	for (int k = 0; k < n; k++) {
	...
	}
}
O(n) * (O(log(n)) + O(n)) = O(n) * O(n) = O(n^2)


for (int i = 0; i < n; i++) ...
for (int j = 0; j * j < n; j++) ...

O(n) + O(sqrt(n)) = O(n)


for (int i = 0; i < n; i++) ...
for (int j = n; j > 0; j--) ...

O(n) + O(n) = O(n)


for (int i = 1; i * i < n; i += 2) ...
for (int i = 0; i < n; i += 5) ...

O(sqrt(n)) + O(n) = O(n)

